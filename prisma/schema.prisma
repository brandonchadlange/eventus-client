generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  open_tasks    Decimal   @default(0) @db.Decimal
  open_requests Decimal   @default(0) @db.Decimal
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Action {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id    String     @db.Uuid
  action_id   String     @db.VarChar
  name        String     @db.VarChar
  description String?    @db.VarChar
  endpoint    String     @db.VarChar
  rank        Decimal    @default(-1) @db.Decimal
  Event       Event      @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ActionTX    ActionTX[]
}

model Event {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id    String    @db.VarChar
  name        String    @db.VarChar
  description String?   @db.VarChar
  Action      Action[]
  Trigger     Trigger[]
}

model Project {
  id         String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id String @db.VarChar
  name       String @db.VarChar
}

model ActionTX {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  action_id       String?   @db.Uuid
  start           DateTime? @db.Timestamptz(6)
  end             DateTime? @db.Timestamptz(6)
  time_in_seconds Decimal?  @db.Decimal
  status          Decimal?  @db.Decimal
  response        String?   @db.VarChar
  Action          Action?   @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model EarlyAccess {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  email      String?   @db.VarChar
}

model Trigger {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id   String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  Event      Event?    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
